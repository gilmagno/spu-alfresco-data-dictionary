<?xml version="1.0" encoding="UTF-8"?>

<process-definition xmlns="urn:jbpm.org:jpdl-3.1" name="spu:arquivarProcesso">
   <swimlane name="initiator"/>
   <start-state name="start">
      <task name="bpm:startTask" swimlane="initiator"/>
      <transition name="" to="end">
         <action class="org.alfresco.repo.workflow.jbpm.AlfrescoJavaScript">
            <runas>admin</runas>
            <script>
                var processo = bpm_package.children[0];
                arquivarProcesso(processo);

                function arquivarProcesso(processo) {
                    /* Status */
	                var status = getStatusArquivado();

                    /* Properties */
                    processo.properties['spu:processo.EmAnalise'] = true;
                    processo.properties['spu:processo.Status'] = 'workspace://SpacesStore/' + status.properties['sys:node-uuid'];
                    processo.save();

                    /* Pasta do Arquivo */
                    var subPastaArquivo = getSubPastaArquivo(processo);
                    processo.move(subPastaArquivo);
                    
                    /* Permiss√µes */
                    removerPermissoesEscrita(processo);
                }

                function getStatusArquivado() {
	                var status = search.luceneSearch('PATH:\"/cm:generalclassifiable//cm:SPU//cm:Status//cm:Arquivado\"');
	                return status[0];
                }

                function getSubPastaArquivo(processo) {
                    var subPastaArquivo;    
                    
                    var destino = getNode(processo.properties['spu:processo.Destino']);
                    var arquivo = getArquivo(destino);

                    var ano = getAnoArquivo(processo);
                    var pastaAno = getOrCreateFolder(arquivo, ano, ano);

                    var nomeTipoProcesso = getNomeTipoProcesso(processo);
                    var pastaTipoProcesso = getOrCreateFolder(pastaAno, nomeTipoProcesso, nomeTipoProcesso);
                    
                    subPastaArquivo = pastaTipoProcesso;

                    return subPastaArquivo;       
                }

                function getNode(nodeId) {
	                var node = search.luceneSearch('ID:"workspace://SpacesStore/' + nodeId + '"');
	                if (node != undefined &amp;&amp; node.length &gt; 0) {
		                node = node[0];
	                }
	                return node;
                }

                function getArquivo(destino) {
                    var arquivos = search.luceneSearch("workspace://SpacesStore", 'PATH:"' + destino.getQnamePath() + '/*" AND TYPE:"spu:caixaarquivo"');
	                var arquivo = arquivos[0];

                    return arquivo;
                }

                function getAnoArquivo(processo) {
                    var data = processo.properties['spu:processo.Data'];
                    var ano = data.getFullYear();
                    return ano;
                }
    
                function getNomeTipoProcesso(processo) {
                    var assunto = getNode(processo.properties['spu:processo.Assunto']);
                    var tipoprocesso = assunto.parent;
                    var nome = tipoprocesso.properties.title;
                    return nome;
                }

                function getOrCreateFolder(parent, folderName, folderTitle) {
                    var props = new Array();
                    props["cm:name"] = folderName;
                    props["cm:title"] = (folderTitle) ? folderTitle : folderName;

                    return getOrCreateNode(parent, 'cm:folder', props);
                }

                function getOrCreateNode(parent, type, props) {
                    var nodeName = props['cm:name'];
                    var existingNode = parent.childByNamePath(nodeName);
                    var node = (!existingNode) ? parent.createNode(nodeName, type, props) : existingNode;
                    return node;
                }

                function removerPermissoesEscrita(processo) {
                    var permissoes = processo.getPermissions();
	                for (var i=0; i &lt; permissoes.length; i++) {
		                permissao = getPermissaoComoHash(permissoes[i]);
                        role = permissao['role'];
                        if (role == 'Editor' || role == 'Collaborator') {
                            group = permissao['group'];
                            processo.removePermission(role, group);
                        }
	                }
                }

                function getPermissaoComoHash(permissionString) {
                    var hash = new Array();
                    var allow = permissionString.substring(0, permissionString.indexOf(';'));
                    var group = permissionString.substring(permissionString.indexOf(';')+1, permissionString.lastIndexOf(';'));
                    var role = permissionString.substring(permissionString.lastIndexOf(';')+1);
                    hash['allow'] = allow;
                    hash['group'] = group;
                    hash['role'] = role;

                    return hash;
                }
            </script>
         </action>
      </transition>
   </start-state>
   <end-state name="end"/>
</process-definition>
